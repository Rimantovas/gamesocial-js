'use strict';

var react = require('react');
var jsxRuntime = require('react/jsx-runtime');
var Pt = require('axios');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var Pt__default = /*#__PURE__*/_interopDefault(Pt);

var ot=Object.defineProperty,nt=Object.defineProperties;var st=Object.getOwnPropertyDescriptors;var F=Object.getOwnPropertySymbols;var ct=Object.prototype.hasOwnProperty,dt=Object.prototype.propertyIsEnumerable;var G=(e,t,r)=>t in e?ot(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,w=(e,t)=>{for(var r in t||(t={}))ct.call(t,r)&&G(e,r,t[r]);if(F)for(var r of F(t))dt.call(t,r)&&G(e,r,t[r]);return e},g=(e,t)=>nt(e,st(t));var A=(e,t,r)=>new Promise((a,i)=>{var n=c=>{try{u(r.next(c));}catch(o){i(o);}},_=c=>{try{u(r.throw(c));}catch(o){i(o);}},u=c=>c.done?a(c.value):Promise.resolve(c.value).then(n,_);u((r=r.apply(e,t)).next());});var C=(i=>(i.created="created",i.pending="pending",i.completed="completed",i.failed="failed",i))(C||{}),ut=(i=>(i.created="created",i.started="started",i.completed="completed",i.failed="failed",i))(ut||{});var O=(u=>(u.NO_PARTICIPANT="NO_PARTICIPANT",u.START="START",u.CLAIM="CLAIM",u.PENDING="PENDING",u.COMPLETED="COMPLETED",u.FAILED="FAILED",u.AUTH_REQUIRED="AUTH_REQUIRED",u))(O||{});var T=(p=>(p.telegram_join="telegram_join",p.telegram_connect="telegram_connect",p.youtube_view="youtube_view",p.image_upload="image_upload",p.twitter_repost="twitter_repost",p.twitter_follow="twitter_follow",p.twitter_reply="twitter_reply",p.twitter_like="twitter_like",p.twitter_activity="twitter_activity",p.twitter_connect="twitter_connect",p.discord_join="discord_join",p.discord_connect="discord_connect",p.submit_string="submit_string",p.manual="manual",p.daily_login="daily_login",p.open_url="open_url",p.youtube_subscribe="youtube_subscribe",p.twitch_follow="twitch_follow",p))(T||{});var N=react.createContext({apiUrl:"",apiKey:"",authToken:void 0,setAuthToken:()=>{}}),y=()=>react.useContext(N);function j({children:e,state:t,apiKey:r,apiUrl:a}){return t!=null||(t=_t(r,a)),jsxRuntime.jsx(N.Provider,{value:t,children:e})}var _t=(e,t)=>{let[r,a]=react.useState({apiUrl:t,apiKey:e,userAuthToken:void 0}),i=r.userAuthToken,n=react.useCallback(_=>{a(u=>g(w({},u),{userAuthToken:_}));},[]);return {apiUrl:t,apiKey:e,authToken:i,setAuthToken:n}};var k=()=>{let{authToken:e,apiUrl:t,apiKey:r}=y();return ()=>{let i=Pt__default.default.create({baseURL:t,timeout:1e4,headers:{"Api-Key":r,"Api-Version":"1.0"}});return i.interceptors.request.use(n=>{let _=e;return _&&(n.headers.Authorization=`Bearer ${_}`),n},n=>Promise.reject(n)),i.interceptors.response.use(n=>n,n=>(n.response&&n.response.status===401&&typeof window!="undefined"&&localStorage.removeItem("token"),Promise.reject(n))),i}};var x={discord_not_connected:"Discord account is not connected",discord_guild_user_not_found:"Discord user not found in channel ",discord_guild_required_role_not_exists:"Discord channel verification must be passed",discord_guild_user_is_pending:"Please validate that your accepted Terms of Discord channel",discord_unauthenticated:"Please re-authenticate your discord account",telegram_not_connected:"Telegram account is not connected",telegram_member_not_found:"Telegram account not found in group",telegram_unauthenticated:"Please re-authenticate your telegram account",twitter_not_connected:"X account is not connected",twitter_follower_not_found:"Your X account do not follow required account",twitter_unauthenticated:"Please re-authenticate your X account",youtube_invalid_video_watch_length:"Please watch whole video",file_not_provided:"File not provided",file_size_exceeds:"File size exceeds limit",invalid_file_type:"Invalid file type",mission_not_found:"Mission not found",mission_not_started:"Mission not started",mission_ended:"Mission ended",task_not_found:"Task not found",task_inactive:"Task inactive",participant_not_found:"Participant not found",third_party_unauthenticated:"Please re-authenticate your account",invalid_email:"Invalid email address",invalid_value:"Invalid value",invalid_captcha:"Invalid captcha"},K=e=>e===x.discord_unauthenticated||e===x.telegram_unauthenticated||e===x.twitter_unauthenticated;var $=react.createContext({missions:[],tasks:[],getTasksForMission:()=>[],updateTaskStatus:()=>{},maintenance:!1}),H=()=>react.useContext($);function Y({children:e,state:t}){return t!=null||(t=kt()),jsxRuntime.jsx($.Provider,{value:t,children:e})}var kt=()=>{let[e,t]=react.useState([]),[r,a]=react.useState([]),{authToken:i}=y(),n=k(),[_,u]=react.useState(!1);react.useEffect(()=>{c();},[i]),react.useEffect(()=>{e.length>0&&o(e.map(d=>d.id));},[e]),react.useEffect(()=>{i&&i.length===0&&u(!0);},[i]);let c=()=>{n().get("missions").then(function(d){t(d.data);}).catch(function(){u(!0);}).finally(function(){});},o=d=>{let m=d.map(f=>n().get(`missions/${f}/tasks`));Promise.all(m).then(function(f){let P=new Set(Object.values(T)),h=f.map(v=>v.data).flat().filter(v=>P.has(v.type));a(h);}).catch(function(){u(!0);});},s=(d,m)=>{a(r.map(f=>f.id===d?g(w({},f),{participation:{status:m}}):f));},l=react.useCallback(d=>r.filter(m=>m.mission_id===d),[r]);return {missions:e,tasks:r,getTasksForMission:l,updateTaskStatus:s,maintenance:_}};var q=(r=>(r.points="points",r.multiplier="multiplier",r))(q||{});var J=react.createContext({participant:void 0,isThirdPartyAuthenticated:()=>!1,addPoints:()=>{},getParticipant:()=>{}}),M=()=>react.useContext(J);function z({children:e,state:t,errorCallback:r}){return t!=null||(t=St(r)),jsxRuntime.jsx(J.Provider,{value:t,children:e})}var St=e=>{let[t,r]=react.useState(),{authToken:a}=y(),i=k();react.useEffect(()=>{a?n():r(void 0);},[a]);let n=()=>{i().get("participants/me").then(function(c){r(c.data);}).catch(function(c){console.error(c),e&&e(c);});};return {participant:t,isThirdPartyAuthenticated:c=>!!(t!=null&&t.authenticated.includes(c)),addPoints:c=>{c.points_reward&&r(o=>{var s;if(o)if(c.reward_type==="points"){let l=Math.floor(c.points_reward*((s=t==null?void 0:t.points_multiplier)!=null?s:1));r(d=>{if(d)return g(w({},d),{points:(d==null?void 0:d.points)+l})});}else r(l=>{if(l)return g(w({},l),{points_multiplier:(l==null?void 0:l.points_multiplier)+c.points_reward})});});},getParticipant:n}};var W=react.createContext({isParticipationLoading:!1,participate:()=>Promise.resolve(!1)}),X=()=>react.useContext(W);function Q({children:e,state:t,errorCallback:r}){return t!=null||(t=Lt(r)),jsxRuntime.jsx(W.Provider,{value:t,children:e})}var Lt=e=>{let[t,r]=react.useState(!1),{updateTaskStatus:a}=H(),{addPoints:i,getParticipant:n}=M(),_=k(),u=o=>{var l,d,m,f,P,h,v,p;let s="";(d=(l=o==null?void 0:o.response)==null?void 0:l.data)!=null&&d.message?typeof((f=(m=o==null?void 0:o.response)==null?void 0:m.data)==null?void 0:f.message)=="string"&&(s=(h=(P=o==null?void 0:o.response)==null?void 0:P.data)==null?void 0:h.message.toString()):(v=o==null?void 0:o.response)!=null&&v.message&&(s=(p=o==null?void 0:o.response)==null?void 0:p.message.toString()),s?s in x?(K(s)&&n(),e&&e(x[s])):e&&e(s):e&&e("Server error, please try again later");};return {isParticipationLoading:t,participate:(o,s,l)=>A(void 0,null,function*(){r(!0);let d=w({},s);if(s!=null&&s.file){let m=yield fetch(s.file).then(f=>f.blob()).then(f=>{let P=new FileReader;return P.readAsDataURL(f),new Promise(h=>{P.onloadend=()=>{h(P.result);};})});d=g(w({},s),{file:{imageSrc:m}});}return yield _().post(`tasks/${o.id}`,s?d:void 0).then(function(m){return a(o.id,m.data.status),m.data.status==="completed"&&o.points_reward&&i(o),l&&l(),!0}).catch(function(m){u(m);}).finally(function(){r(!1);}),!1})}};var S=(a=>(a.twitter="twitter",a.telegram="telegram",a.discord="discord",a))(S||{});var V=()=>{let e=new URL(window.location.href);return e.search="",e.href};var B=Object.fromEntries(Object.values(S).map(e=>[e,!1])),tt=react.createContext({isLoading:!1,authenticated:B,authenticate:()=>({}),isAuthenticated:()=>!1}),et=()=>react.useContext(tt);function rt({children:e,state:t,errorCallback:r}){return t!=null||(t=Gt(r)),jsxRuntime.jsx(tt.Provider,{value:t,children:e})}var Gt=e=>{let[t,r]=react.useState(B),[a,i]=react.useState(!1),{participant:n}=M(),_=k();return react.useEffect(()=>{let o=Object.fromEntries(Object.values(S).map(s=>[s,!!(n!=null&&n.authenticated.includes(s))]));r(o);},[n]),{isLoading:a,authenticated:t,authenticate:o=>{i(!0),_().get(`auth/${o}`,{params:{redirect_url:V()}}).then(function(s){if(s.data.url){if(s.data.url.includes("?error="))throw new Error("Failed to authenticate with ThirdPartyAuth: "+s.data.url.split("?error=")[1]);window.location.href=s.data.url;}}).catch(function(s){console.error(s),e&&e(s);}).finally(()=>{i(!1);});},isAuthenticated:o=>t[o]||!1}};var jt=e=>{var U;let{task:t,participationDisabled:r,maintenance:a,children:i,callbacks:n,onSuccess:_}=e,[u,c]=react.useState(!1),{participate:o,isParticipationLoading:s}=X(),l=et(),d=t.participation&&t.participation.status==="completed",m=()=>A(void 0,null,function*(){switch(t.type){case"discord_join":window.open(t.metadata.invite_url,"_blank");break;case"twitter_follow":window.open(`https://twitter.com/intent/follow?screen_name=${t.metadata.username}`,"_blank");break;case"twitter_like":window.open(t.metadata.post_url,"_blank");break;case"twitter_reply":window.open(t.metadata.post_url,"_blank");break;case"twitter_repost":window.open(`https://twitter.com/intent/retweet?tweet_id=${t.metadata.post_id}`,"_blank");break;case"telegram_join":window.open(`https://t.me/${t.metadata.username}`,"_blank");break;case"image_upload":let b=yield n.onFileUpload(t);h({file:b});return;case"submit_string":let I=yield n.onSubmitString(t);h({value:I});return;case"open_url":window.open(t.metadata.url,"_blank");break;case"youtube_view":let at=yield n.onYoutubeView(t,t.metadata.video_id);h({seconds:at});return;case"daily_login":h();return;case"twitch_follow":window.open(t.metadata.twitch_url,"_blank");break;case"youtube_subscribe":window.open(t.metadata.channel_url,"_blank");break}c(!0);}),f=()=>{switch(t.type){case"discord_connect":case"discord_join":return l.isAuthenticated("discord");case"twitter_connect":case"twitter_follow":case"twitter_like":case"twitter_reply":case"twitter_repost":return l.isAuthenticated("twitter");case"telegram_connect":case"telegram_join":return l.isAuthenticated("telegram");default:return !0}},P=()=>{switch(t.type){case"discord_connect":case"discord_join":return l.authenticate("discord");case"twitter_connect":case"twitter_follow":case"twitter_like":case"twitter_reply":case"twitter_repost":return l.authenticate("twitter");case"telegram_connect":case"telegram_join":return l.authenticate("telegram")}},h=b=>A(void 0,null,function*(){(yield o(t,b,_))||c(!1);}),v=()=>{r||a||d||(f()?u?h():m():P());},p=()=>{var b,I;return d?"COMPLETED":t.participation?((b=t.participation)==null?void 0:b.status)==="pending"?"PENDING":((I=t.participation)==null?void 0:I.status)==="failed"?"FAILED":u?"CLAIM":f()?"START":"AUTH_REQUIRED":"NO_PARTICIPANT"};return i({onClick:!!(d||a||r||t.type==="manual"||t.type==="twitter_activity")?void 0:v,type:p(),isLoading:l.isLoading||s,disabled:r||a,comment:(U=t.participation)==null?void 0:U.comment})},Kt=e=>{let{task:t,participationDisabled:r,maintenance:a,errorCallback:i,onSuccess:n}=e;return jsxRuntime.jsx(Q,{errorCallback:i,children:jsxRuntime.jsx(rt,{errorCallback:i,children:jsxRuntime.jsx(jt,{task:t,participationDisabled:r,maintenance:a,callbacks:e.callbacks,onSuccess:n,children:e.children})})})},$t=Kt;var Ht=(a=>(a.guaranteed="guaranteed",a.scoreboard="scoreboard",a.lottery="lottery",a))(Ht||{}),Yt=(a=>(a.crypto="crypto",a.points="points",a.points_per_task="points_per_task",a))(Yt||{});var qt=(i=>(i.participant_reward_added="participant_reward_added",i.participant_reward_removed="participant_reward_removed",i.third_party_authenticated="third_party_authenticated",i.task_completed="task_completed",i))(qt||{});var Jt=(r=>(r.email="email",r.is_equal="is_equal",r))(Jt||{});var Ir=({children:e,apiKey:t,apiUrl:r,errorCallback:a})=>jsxRuntime.jsx(j,{apiKey:t,apiUrl:r,children:jsxRuntime.jsx(z,{errorCallback:a,children:jsxRuntime.jsx(Y,{children:e})})});

exports.GamesocialProvider = j;
exports.MissionRewardType = Yt;
exports.MissionType = Ht;
exports.MissionsProvider = Y;
exports.ParticipantMissionStatus = ut;
exports.ParticipantProvider = z;
exports.ParticipantTaskStatus = C;
exports.QuestWebhookType = qt;
exports.QuestsProvider = Ir;
exports.TaskButtonType = O;
exports.TaskProvider = Q;
exports.TaskRewardType = q;
exports.TaskType = T;
exports.TaskValidation = Jt;
exports.TaskWrapper = $t;
exports.ThirdPartyProvider = S;
exports.errorMessages = x;
exports.getCurrentHrefWithoutQueryParams = V;
exports.shouldRefetchParticipant = K;
exports.useGamesocial = y;
exports.useGamesocialState = _t;
exports.useMissions = H;
exports.useMissionsState = kt;
exports.useParticipant = M;
exports.useParticipantState = St;
exports.useTask = X;
exports.useTaskState = Lt;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,