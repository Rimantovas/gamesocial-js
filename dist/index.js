'use strict';

var react = require('react');
var jsxRuntime = require('react/jsx-runtime');
var Pt = require('axios');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var Pt__default = /*#__PURE__*/_interopDefault(Pt);

var ot=Object.defineProperty,nt=Object.defineProperties;var st=Object.getOwnPropertyDescriptors;var F=Object.getOwnPropertySymbols;var ct=Object.prototype.hasOwnProperty,dt=Object.prototype.propertyIsEnumerable;var G=(e,t,r)=>t in e?ot(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,w=(e,t)=>{for(var r in t||(t={}))ct.call(t,r)&&G(e,r,t[r]);if(F)for(var r of F(t))dt.call(t,r)&&G(e,r,t[r]);return e},g=(e,t)=>nt(e,st(t));var A=(e,t,r)=>new Promise((i,a)=>{var u=c=>{try{n(r.next(c));}catch(o){a(o);}},_=c=>{try{n(r.throw(c));}catch(o){a(o);}},n=c=>c.done?i(c.value):Promise.resolve(c.value).then(u,_);n((r=r.apply(e,t)).next());});var C=(a=>(a.created="created",a.pending="pending",a.completed="completed",a.failed="failed",a))(C||{}),ut=(a=>(a.created="created",a.started="started",a.completed="completed",a.failed="failed",a))(ut||{});var O=(n=>(n.NO_PARTICIPANT="NO_PARTICIPANT",n.START="START",n.CLAIM="CLAIM",n.PENDING="PENDING",n.COMPLETED="COMPLETED",n.FAILED="FAILED",n.AUTH_REQUIRED="AUTH_REQUIRED",n))(O||{});var T=(p=>(p.telegram_join="telegram_join",p.telegram_connect="telegram_connect",p.youtube_view="youtube_view",p.image_upload="image_upload",p.twitter_repost="twitter_repost",p.twitter_follow="twitter_follow",p.twitter_reply="twitter_reply",p.twitter_like="twitter_like",p.twitter_activity="twitter_activity",p.twitter_connect="twitter_connect",p.discord_join="discord_join",p.discord_connect="discord_connect",p.submit_string="submit_string",p.manual="manual",p.daily_login="daily_login",p.open_url="open_url",p.youtube_subscribe="youtube_subscribe",p.twitch_follow="twitch_follow",p))(T||{});var N=react.createContext({apiUrl:"",apiKey:"",authToken:void 0,setAuthToken:()=>{}}),y=()=>react.useContext(N);function j({children:e,state:t,apiKey:r,apiUrl:i}){return t!=null||(t=_t(r,i)),jsxRuntime.jsx(N.Provider,{value:t,children:e})}var _t=(e,t)=>{let[r,i]=react.useState({apiUrl:t,apiKey:e,userAuthToken:void 0}),a=r.userAuthToken,u=react.useCallback(_=>{i(n=>g(w({},n),{userAuthToken:_}));},[]);return {apiUrl:t,apiKey:e,authToken:a,setAuthToken:u}};var v=()=>{let{authToken:e,apiUrl:t,apiKey:r}=y(),i=()=>{let _=Pt__default.default.create({baseURL:t,timeout:1e4,headers:{"Api-Key":r,"Api-Version":"1.0"}});return _.interceptors.request.use(n=>{let c=e;return c&&(n.headers.Authorization=`Bearer ${c}`),n},n=>Promise.reject(n)),_.interceptors.response.use(n=>n,n=>(n.response&&n.response.status===401&&typeof window!="undefined"&&localStorage.removeItem("token"),Promise.reject(n))),_},[a,u]=react.useState(i());return react.useEffect(()=>{u(i());},[t,r,e]),a};var x={discord_not_connected:"Discord account is not connected",discord_guild_user_not_found:"Discord user not found in channel ",discord_guild_required_role_not_exists:"Discord channel verification must be passed",discord_guild_user_is_pending:"Please validate that your accepted Terms of Discord channel",discord_unauthenticated:"Please re-authenticate your discord account",telegram_not_connected:"Telegram account is not connected",telegram_member_not_found:"Telegram account not found in group",telegram_unauthenticated:"Please re-authenticate your telegram account",twitter_not_connected:"X account is not connected",twitter_follower_not_found:"Your X account do not follow required account",twitter_unauthenticated:"Please re-authenticate your X account",youtube_invalid_video_watch_length:"Please watch whole video",file_not_provided:"File not provided",file_size_exceeds:"File size exceeds limit",invalid_file_type:"Invalid file type",mission_not_found:"Mission not found",mission_not_started:"Mission not started",mission_ended:"Mission ended",task_not_found:"Task not found",task_inactive:"Task inactive",participant_not_found:"Participant not found",third_party_unauthenticated:"Please re-authenticate your account",invalid_email:"Invalid email address",invalid_value:"Invalid value",invalid_captcha:"Invalid captcha"},K=e=>e===x.discord_unauthenticated||e===x.telegram_unauthenticated||e===x.twitter_unauthenticated;var Y=react.createContext({missions:[],tasks:[],getTasksForMission:()=>[],updateTaskStatus:()=>{},maintenance:!1}),$=()=>react.useContext(Y);function H({children:e,state:t}){return t!=null||(t=yt()),jsxRuntime.jsx(Y.Provider,{value:t,children:e})}var yt=()=>{let[e,t]=react.useState([]),[r,i]=react.useState([]),{authToken:a}=y(),u=v(),[_,n]=react.useState(!1);react.useEffect(()=>{c();},[a]),react.useEffect(()=>{e.length>0&&o(e.map(d=>d.id));},[e]),react.useEffect(()=>{a&&a.length===0&&n(!0);},[a]);let c=()=>{u.get("missions").then(function(d){t(d.data);}).catch(function(){n(!0);}).finally(function(){});},o=d=>{let m=d.map(f=>u.get(`missions/${f}/tasks`));Promise.all(m).then(function(f){let P=new Set(Object.values(T)),h=f.map(k=>k.data).flat().filter(k=>P.has(k.type));i(h);}).catch(function(){n(!0);});},s=(d,m)=>{i(r.map(f=>f.id===d?g(w({},f),{participation:{status:m}}):f));},l=react.useCallback(d=>r.filter(m=>m.mission_id===d),[r]);return {missions:e,tasks:r,getTasksForMission:l,updateTaskStatus:s,maintenance:_}};var q=(r=>(r.points="points",r.multiplier="multiplier",r))(q||{});var J=react.createContext({participant:void 0,isThirdPartyAuthenticated:()=>!1,addPoints:()=>{},getParticipant:()=>{}}),M=()=>react.useContext(J);function z({children:e,state:t,errorCallback:r}){return t!=null||(t=Mt(r)),jsxRuntime.jsx(J.Provider,{value:t,children:e})}var Mt=e=>{let[t,r]=react.useState(),{authToken:i}=y(),a=v();react.useEffect(()=>{i?u():r(void 0);},[i]);let u=()=>{a.get("participants/me").then(function(c){r(c.data);}).catch(function(c){console.error(c),e&&e(c);});};return {participant:t,isThirdPartyAuthenticated:c=>!!(t!=null&&t.authenticated.includes(c)),addPoints:c=>{c.points_reward&&r(o=>{var s;if(o)if(c.reward_type==="points"){let l=Math.floor(c.points_reward*((s=t==null?void 0:t.points_multiplier)!=null?s:1));r(d=>{if(d)return g(w({},d),{points:(d==null?void 0:d.points)+l})});}else r(l=>{if(l)return g(w({},l),{points_multiplier:(l==null?void 0:l.points_multiplier)+c.points_reward})});});},getParticipant:u}};var V=react.createContext({isParticipationLoading:!1,participate:()=>Promise.resolve(!1)}),W=()=>react.useContext(V);function X({children:e,state:t,errorCallback:r}){return t!=null||(t=Dt(r)),jsxRuntime.jsx(V.Provider,{value:t,children:e})}var Dt=e=>{let[t,r]=react.useState(!1),{updateTaskStatus:i}=$(),{addPoints:a,getParticipant:u}=M(),_=v(),n=o=>{var l,d,m,f,P,h,k,p;let s="";(d=(l=o==null?void 0:o.response)==null?void 0:l.data)!=null&&d.message?typeof((f=(m=o==null?void 0:o.response)==null?void 0:m.data)==null?void 0:f.message)=="string"&&(s=(h=(P=o==null?void 0:o.response)==null?void 0:P.data)==null?void 0:h.message.toString()):(k=o==null?void 0:o.response)!=null&&k.message&&(s=(p=o==null?void 0:o.response)==null?void 0:p.message.toString()),s?s in x?(K(s)&&u(),e&&e(x[s])):e&&e(s):e&&e("Server error, please try again later");};return {isParticipationLoading:t,participate:(o,s,l)=>A(void 0,null,function*(){r(!0);let d=w({},s);if(s!=null&&s.file){let m=yield fetch(s.file).then(f=>f.blob()).then(f=>{let P=new FileReader;return P.readAsDataURL(f),new Promise(h=>{P.onloadend=()=>{h(P.result);};})});d=g(w({},s),{file:{imageSrc:m}});}return yield _.post(`tasks/${o.id}`,s?d:void 0).then(function(m){return i(o.id,m.data.status),m.data.status==="completed"&&o.points_reward&&a(o),l&&l(),!0}).catch(function(m){n(m);}).finally(function(){r(!1);}),!1})}};var S=(i=>(i.twitter="twitter",i.telegram="telegram",i.discord="discord",i))(S||{});var Q=()=>{let e=new URL(window.location.href);return e.search="",e.href};var B=Object.fromEntries(Object.values(S).map(e=>[e,!1])),tt=react.createContext({isLoading:!1,authenticated:B,authenticate:()=>({}),isAuthenticated:()=>!1}),et=()=>react.useContext(tt);function rt({children:e,state:t,errorCallback:r}){return t!=null||(t=Nt(r)),jsxRuntime.jsx(tt.Provider,{value:t,children:e})}var Nt=e=>{let[t,r]=react.useState(B),[i,a]=react.useState(!1),{participant:u}=M(),_=v();return react.useEffect(()=>{let o=Object.fromEntries(Object.values(S).map(s=>[s,!!(u!=null&&u.authenticated.includes(s))]));r(o);},[u]),{isLoading:i,authenticated:t,authenticate:o=>{a(!0),_.get(`auth/${o}`,{params:{redirect_url:Q()}}).then(function(s){if(s.data.url){if(s.data.url.includes("?error="))throw new Error("Failed to authenticate with ThirdPartyAuth: "+s.data.url.split("?error=")[1]);window.location.href=s.data.url;}}).catch(function(s){console.error(s),e&&e(s);}).finally(()=>{a(!1);});},isAuthenticated:o=>t[o]||!1}};var Yt=e=>{var U;let{task:t,participationDisabled:r,maintenance:i,children:a,callbacks:u,onSuccess:_}=e,[n,c]=react.useState(!1),{participate:o,isParticipationLoading:s}=W(),l=et(),d=t.participation&&t.participation.status==="completed",m=()=>A(void 0,null,function*(){switch(t.type){case"discord_join":window.open(t.metadata.invite_url,"_blank");break;case"twitter_follow":window.open(`https://twitter.com/intent/follow?screen_name=${t.metadata.username}`,"_blank");break;case"twitter_like":window.open(t.metadata.post_url,"_blank");break;case"twitter_reply":window.open(t.metadata.post_url,"_blank");break;case"twitter_repost":window.open(`https://twitter.com/intent/retweet?tweet_id=${t.metadata.post_id}`,"_blank");break;case"telegram_join":window.open(`https://t.me/${t.metadata.username}`,"_blank");break;case"image_upload":let b=yield u.onFileUpload(t);h({file:b});return;case"submit_string":let I=yield u.onSubmitString(t);h({value:I});return;case"open_url":window.open(t.metadata.url,"_blank");break;case"youtube_view":let at=yield u.onYoutubeView(t,t.metadata.video_id);h({seconds:at});return;case"daily_login":h();return;case"twitch_follow":window.open(t.metadata.twitch_url,"_blank");break;case"youtube_subscribe":window.open(t.metadata.channel_url,"_blank");break}c(!0);}),f=()=>{switch(t.type){case"discord_connect":case"discord_join":return l.isAuthenticated("discord");case"twitter_connect":case"twitter_follow":case"twitter_like":case"twitter_reply":case"twitter_repost":return l.isAuthenticated("twitter");case"telegram_connect":case"telegram_join":return l.isAuthenticated("telegram");default:return !0}},P=()=>{switch(t.type){case"discord_connect":case"discord_join":return l.authenticate("discord");case"twitter_connect":case"twitter_follow":case"twitter_like":case"twitter_reply":case"twitter_repost":return l.authenticate("twitter");case"telegram_connect":case"telegram_join":return l.authenticate("telegram")}},h=b=>A(void 0,null,function*(){(yield o(t,b,_))||c(!1);}),k=()=>{r||i||d||(f()?n?h():m():P());},p=()=>{var b,I;return d?"COMPLETED":t.participation?((b=t.participation)==null?void 0:b.status)==="pending"?"PENDING":((I=t.participation)==null?void 0:I.status)==="failed"?"FAILED":n?"CLAIM":f()?"START":"AUTH_REQUIRED":"NO_PARTICIPANT"};return a({onClick:!!(d||i||r||t.type==="manual"||t.type==="twitter_activity")?void 0:k,type:p(),isLoading:l.isLoading||s,disabled:r||i,comment:(U=t.participation)==null?void 0:U.comment})},$t=e=>{let{task:t,participationDisabled:r,maintenance:i,errorCallback:a,onSuccess:u}=e;return jsxRuntime.jsx(X,{errorCallback:a,children:jsxRuntime.jsx(rt,{errorCallback:a,children:jsxRuntime.jsx(Yt,{task:t,participationDisabled:r,maintenance:i,callbacks:e.callbacks,onSuccess:u,children:e.children})})})},Ht=$t;var qt=(i=>(i.guaranteed="guaranteed",i.scoreboard="scoreboard",i.lottery="lottery",i))(qt||{}),Jt=(i=>(i.crypto="crypto",i.points="points",i.points_per_task="points_per_task",i))(Jt||{});var zt=(a=>(a.participant_reward_added="participant_reward_added",a.participant_reward_removed="participant_reward_removed",a.third_party_authenticated="third_party_authenticated",a.task_completed="task_completed",a))(zt||{});var Vt=(r=>(r.email="email",r.is_equal="is_equal",r))(Vt||{});var Tr=({children:e,apiKey:t,apiUrl:r,errorCallback:i})=>jsxRuntime.jsx(j,{apiKey:t,apiUrl:r,children:jsxRuntime.jsx(z,{errorCallback:i,children:jsxRuntime.jsx(H,{children:e})})});

exports.GamesocialProvider = j;
exports.MissionRewardType = Jt;
exports.MissionType = qt;
exports.MissionsProvider = H;
exports.ParticipantMissionStatus = ut;
exports.ParticipantProvider = z;
exports.ParticipantTaskStatus = C;
exports.QuestWebhookType = zt;
exports.QuestsProvider = Tr;
exports.TaskButtonType = O;
exports.TaskProvider = X;
exports.TaskRewardType = q;
exports.TaskType = T;
exports.TaskValidation = Vt;
exports.TaskWrapper = Ht;
exports.ThirdPartyProvider = S;
exports.errorMessages = x;
exports.getCurrentHrefWithoutQueryParams = Q;
exports.shouldRefetchParticipant = K;
exports.useGamesocial = y;
exports.useGamesocialState = _t;
exports.useMissions = $;
exports.useMissionsState = yt;
exports.useParticipant = M;
exports.useParticipantState = Mt;
exports.useTask = W;
exports.useTaskState = Dt;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,