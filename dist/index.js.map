{"version":3,"sources":["../src/index.ts","../src/models/enums/participants.enum.ts","../src/models/enums/task_button_type.enum.ts","../src/models/enums/tasks.enum.ts","../src/providers/task.tsx","../src/providers/gamesocial.tsx","../src/hooks/useApi.ts","../src/utils/errors.ts","../src/providers/missions.tsx","../src/providers/participant.tsx","../src/models/enums/task_reward_type.enum.ts","../src/models/enums/third_party.enum.ts","../src/utils/utils.ts","../src/providers/third_party_auth.tsx","../src/components/TaskWrapper.tsx","../src/models/enums/missions.enum.ts","../src/models/enums/quest_webhook_type.ts","../src/models/enums/task_validation.enum.ts","../src/wrappers.tsx"],"sourcesContent":["export * from \"./components\";\nexport * from \"./models\";\nexport * from \"./providers\";\nexport * from \"./utils\";\nexport * from \"./wrappers\";\n","export enum ParticipantTaskStatus {\n  created = 'created',\n  pending = 'pending',\n  completed = 'completed',\n  failed = 'failed',\n}\n\nexport enum ParticipantMissionStatus {\n  created = 'created',\n  started = 'started',\n  completed = 'completed',\n  failed = 'failed',\n}\n","export enum TaskButtonType {\n  NO_PARTICIPANT = \"NO_PARTICIPANT\", // If not participant is found. Usually that means the user is not authenticated.\n  START = \"START\", // If the task is not completed and the user is authenticated.\n  CLAIM = \"CLAIM\", // If the task has been started and the user is authenticated.\n  PENDING = \"PENDING\", // If the task is pending\n  COMPLETED = \"COMPLETED\", // If the task is completed\n  FAILED = \"FAILED\", // If the task has failed\n  AUTH_REQUIRED = \"AUTH_REQUIRED\", // If task requires authentication first\n}\n","export enum TaskType {\n  telegram_join = \"telegram_join\",\n  telegram_connect = \"telegram_connect\",\n\n  youtube_view = \"youtube_view\",\n  image_upload = \"image_upload\",\n\n  twitter_repost = \"twitter_repost\",\n  twitter_follow = \"twitter_follow\",\n  twitter_reply = \"twitter_reply\",\n  twitter_like = \"twitter_like\",\n  twitter_activity = \"twitter_activity\",\n  twitter_connect = \"twitter_connect\",\n\n  discord_join = \"discord_join\",\n  discord_connect = \"discord_connect\",\n\n  submit_string = \"submit_string\",\n  manual = \"manual\",\n\n  daily_login = \"daily_login\",\n  open_url = \"open_url\",\n  youtube_subscribe = \"youtube_subscribe\",\n  twitch_follow = \"twitch_follow\",\n}\n","import { createContext, useContext, useState } from \"react\";\n\nimport { useApi } from \"@/hooks/useApi\";\nimport { ParticipantTaskStatus } from \"@/models/enums/participants.enum\";\nimport { ITask } from \"@/models/interfaces/task\";\nimport { errorMessages, shouldRefetchParticipant } from \"@/utils/errors\";\nimport { useMissions } from \"./missions\";\nimport { useParticipant } from \"./participant\";\n\ntype TaskState = {\n  isParticipationLoading: boolean;\n  participate: (task: ITask, body?: any, callback?: any) => Promise<boolean>;\n};\n\nconst context = createContext<TaskState>({\n  isParticipationLoading: false,\n  participate: () => Promise.resolve(false),\n});\n\nexport const useTask = () => useContext(context);\n\nexport function TaskProvider({\n  children,\n  state,\n  errorCallback,\n}: {\n  children: any;\n  state?: TaskState;\n  errorCallback?: (error: any) => void;\n}) {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  state ??= useTaskState(errorCallback);\n  return <context.Provider value={state}>{children}</context.Provider>;\n}\n\nexport const useTaskState = (\n  errorCallback?: (error: any) => void\n): TaskState => {\n  const [isParticipationLoading, setIsParticipationLoading] =\n    useState<boolean>(false);\n  const { updateTaskStatus } = useMissions();\n  const { addPoints, getParticipant } = useParticipant();\n  const api = useApi();\n\n  const handleError = (e: any) => {\n    let message: string = \"\";\n    if (e?.response?.data?.message) {\n      if (typeof e?.response?.data?.message === \"string\") {\n        message = e?.response?.data?.message.toString();\n      } else {\n        // todo\n      }\n    } else if (e?.response?.message) {\n      message = e?.response?.message.toString();\n    }\n\n    if (!message) {\n      errorCallback && errorCallback(\"Server error, please try again later\");\n    } else {\n      if (message in errorMessages) {\n        const s = shouldRefetchParticipant(message);\n        if (s) {\n          // TODO Maybe await this\n          getParticipant();\n        }\n        errorCallback && errorCallback(errorMessages[message]);\n      } else {\n        errorCallback && errorCallback(message);\n      }\n    }\n  };\n\n  const participate = async (\n    task: ITask,\n    body?: any,\n    callback?: any\n  ): Promise<boolean> => {\n    setIsParticipationLoading(true);\n    let data = { ...body };\n    if (body?.file) {\n      const base64 = await fetch(body.file)\n        .then((response) => response.blob())\n        .then((blob) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob);\n          return new Promise((res) => {\n            reader.onloadend = () => {\n              res(reader.result);\n            };\n          });\n        });\n      data = {\n        ...body,\n        file: {\n          imageSrc: base64,\n        },\n      };\n    }\n    await api\n      .post(`tasks/${task.id}`, body ? data : undefined)\n      .then(function (response) {\n        updateTaskStatus(task.id, response.data.status);\n        if (\n          response.data.status === ParticipantTaskStatus.completed &&\n          task.points_reward\n        ) {\n          addPoints(task);\n        }\n        if (callback) {\n          callback();\n        }\n        return true;\n      })\n      .catch(function (error) {\n        handleError(error);\n      })\n      .finally(function () {\n        setIsParticipationLoading(false);\n      });\n\n    return false;\n  };\n\n  return {\n    isParticipationLoading,\n    participate,\n  };\n};\n","import { createContext, useCallback, useContext, useState } from \"react\";\n\ninterface IConfig {\n  apiUrl: string;\n  apiKey: string;\n  userAuthToken: string | undefined;\n}\n\ntype GamesocialState = {\n  apiUrl: string;\n  apiKey: string;\n  authToken: string | undefined;\n  setAuthToken: (token: string | undefined) => void;\n};\n\nconst context = createContext<GamesocialState>({\n  apiUrl: \"\",\n  apiKey: \"\",\n  authToken: undefined,\n  setAuthToken: () => {},\n});\n\nexport const useGamesocial = () => useContext(context);\n\nexport function GamesocialProvider({\n  children,\n  state,\n  apiKey,\n  apiUrl,\n}: {\n  children: any;\n  state?: GamesocialState;\n  apiKey: string;\n  apiUrl: string;\n}) {\n  state ??= useGamesocialState(apiKey, apiUrl);\n  return <context.Provider value={state}>{children}</context.Provider>;\n}\n\nexport const useGamesocialState = (\n  apiKey: string,\n  apiUrl: string\n): GamesocialState => {\n  const [config, setConfig] = useState<IConfig>({\n    apiUrl: apiUrl,\n    apiKey: apiKey,\n    userAuthToken: undefined,\n  });\n\n  const authToken = config.userAuthToken;\n\n  const setAuthToken = useCallback((token: string | undefined) => {\n    setConfig((prev) => ({\n      ...prev,\n      userAuthToken: token,\n    }));\n  }, []);\n\n  return {\n    apiUrl,\n    apiKey,\n    authToken,\n    setAuthToken,\n  };\n};\n","import { useGamesocial } from \"@/providers/gamesocial\";\nimport axios, { AxiosInstance } from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nexport const useApi = () => {\n  const { authToken, apiUrl, apiKey } = useGamesocial();\n\n  const createApi = (): AxiosInstance => {\n    const api = axios.create({\n      baseURL: apiUrl,\n      timeout: 10000,\n      headers: {\n        \"Api-Key\": apiKey,\n        \"Api-Version\": \"1.0\",\n      },\n    });\n\n    api.interceptors.request.use(\n      (config) => {\n        const token = authToken;\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    api.interceptors.response.use(\n      (response) => {\n        return response;\n      },\n      (error) => {\n        if (error.response && error.response.status === 401) {\n          localStorage.removeItem(\"token\");\n        }\n        return Promise.reject(error);\n      }\n    );\n    return api;\n  };\n\n  const [api, setApi] = useState<AxiosInstance>(createApi());\n\n  useEffect(() => {\n    setApi(createApi());\n  }, [apiUrl, apiKey, authToken]);\n\n  return api;\n};\n","export type ErrorMessages = {\n  [key: string]: string;\n};\n\nexport const errorMessages: ErrorMessages = {\n  discord_not_connected: \"Discord account is not connected\",\n  discord_guild_user_not_found: \"Discord user not found in channel \",\n  discord_guild_required_role_not_exists:\n    \"Discord channel verification must be passed\",\n  discord_guild_user_is_pending:\n    \"Please validate that your accepted Terms of Discord channel\",\n  discord_unauthenticated: \"Please re-authenticate your discord account\",\n\n  telegram_not_connected: \"Telegram account is not connected\",\n  telegram_member_not_found: \"Telegram account not found in group\",\n  telegram_unauthenticated: \"Please re-authenticate your telegram account\",\n\n  twitter_not_connected: \"X account is not connected\",\n  twitter_follower_not_found: \"Your X account do not follow required account\",\n  twitter_unauthenticated: \"Please re-authenticate your X account\",\n\n  youtube_invalid_video_watch_length: \"Please watch whole video\",\n\n  file_not_provided: \"File not provided\",\n  file_size_exceeds: \"File size exceeds limit\",\n  invalid_file_type: \"Invalid file type\",\n\n  mission_not_found: \"Mission not found\",\n  mission_not_started: \"Mission not started\",\n  mission_ended: \"Mission ended\",\n\n  task_not_found: \"Task not found\",\n  task_inactive: \"Task inactive\",\n\n  participant_not_found: \"Participant not found\",\n\n  third_party_unauthenticated: \"Please re-authenticate your account\",\n\n  invalid_email: \"Invalid email address\",\n  invalid_value: \"Invalid value\",\n  invalid_captcha: \"Invalid captcha\",\n};\n\nexport const shouldRefetchParticipant = (error: string) => {\n  return (\n    error === errorMessages.discord_unauthenticated ||\n    error === errorMessages.telegram_unauthenticated ||\n    error === errorMessages.twitter_unauthenticated\n  );\n};\n","import { useApi } from \"@/hooks/useApi\";\nimport { ParticipantTaskStatus } from \"@/models/enums/participants.enum\";\nimport { IMission } from \"@/models/interfaces/mission\";\nimport { ITask } from \"@/models/interfaces/task\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { TaskType } from \"..\";\nimport { useGamesocial } from \"./gamesocial\";\n\ntype MissionsState = {\n  missions: IMission[];\n  tasks: ITask[];\n  getTasksForMission: (missionId: string) => ITask[];\n  updateTaskStatus: (taskId: string, status: ParticipantTaskStatus) => void;\n  maintenance: boolean;\n};\n\nconst context = createContext<MissionsState>({\n  missions: [],\n  tasks: [],\n  getTasksForMission: () => [],\n  updateTaskStatus: () => {},\n  maintenance: false,\n});\n\nexport const useMissions = () => useContext(context);\n\nexport function MissionsProvider({\n  children,\n  state,\n}: {\n  children: any;\n  state?: MissionsState;\n}) {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  state ??= useMissionsState();\n  return <context.Provider value={state}>{children}</context.Provider>;\n}\n\nexport const useMissionsState = (): MissionsState => {\n  const [missions, setMissions] = useState<IMission[]>([]);\n  const [tasks, setTasks] = useState<ITask[]>([]);\n  const { authToken } = useGamesocial();\n  const api = useApi();\n\n  const [maintenance, setMaintenance] = useState<boolean>(false);\n\n  useEffect(() => {\n    getMissions();\n  }, [authToken]);\n\n  useEffect(() => {\n    if (missions.length > 0) {\n      getTasks(missions.map((m) => m.id));\n    }\n  }, [missions]);\n\n  useEffect(() => {\n    if (authToken && authToken.length === 0) {\n      setMaintenance(true);\n    }\n  }, [authToken]);\n\n  const getMissions = () => {\n    api\n      .get(\"missions\")\n      .then(function (response) {\n        setMissions(response.data);\n      })\n      .catch(function () {\n        setMaintenance(true);\n      })\n\n      .finally(function () {\n        // always executed\n      });\n  };\n\n  const getTasks = (missionIds: string[]) => {\n    const promises = missionIds.map((id) => api.get(`missions/${id}/tasks`));\n    Promise.all(promises)\n      .then(function (responses) {\n        const validTypes = new Set(Object.values(TaskType));\n        const tasks = responses\n          .map((r) => r.data)\n          .flat()\n          .filter((t) => validTypes.has(t.type));\n        setTasks(tasks);\n      })\n      .catch(function () {\n        setMaintenance(true);\n      });\n  };\n\n  const updateTaskStatus = (taskId: string, status: ParticipantTaskStatus) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === taskId ? { ...task, participation: { status } } : task\n      )\n    );\n  };\n\n  const getTasksForMission = useCallback(\n    (missionId: string) => {\n      return tasks.filter((t) => t.mission_id === missionId);\n    },\n    [tasks]\n  );\n\n  return {\n    missions,\n    tasks,\n    getTasksForMission,\n    updateTaskStatus,\n    maintenance,\n  };\n};\n","import { createContext, useContext, useEffect, useState } from \"react\";\n\nimport { useApi } from \"@/hooks/useApi\";\nimport { TaskRewardType } from \"@/models/enums/task_reward_type.enum\";\nimport { ITask } from \"@/models/interfaces/task\";\nimport { ThirdPartyProvider } from \"../models/enums/third_party.enum\";\nimport { IParticipant } from \"../models/interfaces/participant\";\nimport { useGamesocial } from \"./gamesocial\";\n\ntype ParticipantState = {\n  participant?: IParticipant;\n  isThirdPartyAuthenticated: (thirdParty: ThirdPartyProvider) => boolean;\n  addPoints: (task: ITask) => void;\n  getParticipant: () => void;\n};\n\nconst context = createContext<ParticipantState>({\n  participant: undefined,\n  isThirdPartyAuthenticated: () => false,\n  addPoints: () => {},\n  getParticipant: () => {},\n});\n\nexport const useParticipant = () => useContext(context);\n\nexport function ParticipantProvider({\n  children,\n  state,\n  errorCallback,\n}: {\n  children: any;\n  state?: ParticipantState;\n  errorCallback?: (error: any) => void;\n}) {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  state ??= useParticipantState(errorCallback);\n  return <context.Provider value={state}>{children}</context.Provider>;\n}\n\nexport const useParticipantState = (\n  errorCallback?: (error: any) => void\n): ParticipantState => {\n  const [participant, setParticipant] = useState<IParticipant>();\n  const { authToken } = useGamesocial();\n\n  const api = useApi();\n\n  useEffect(() => {\n    if (authToken) {\n      getParticipant();\n    } else {\n      setParticipant(undefined);\n    }\n  }, [authToken]);\n\n  const getParticipant = () => {\n    api\n      .get(`participants/me`)\n      .then(function (response) {\n        setParticipant(response.data);\n      })\n      .catch(function (error: any) {\n        console.error(error);\n        errorCallback && errorCallback(error);\n      });\n  };\n\n  const isThirdPartyAuthenticated = (\n    thirdParty: ThirdPartyProvider\n  ): boolean => {\n    return !!participant?.authenticated.includes(thirdParty);\n  };\n\n  const addPoints = (task: ITask) => {\n    if (!task.points_reward) return;\n\n    setParticipant((prev) => {\n      if (!prev) return undefined;\n      if (task.reward_type === TaskRewardType.points) {\n        const points = Math.floor(\n          task.points_reward! * (participant?.points_multiplier ?? 1)\n        );\n        setParticipant((prev) => {\n          if (!prev) return undefined;\n          return {\n            ...prev,\n            points: prev?.points + points,\n          };\n        });\n      } else {\n        setParticipant((prev) => {\n          if (!prev) return undefined;\n          return {\n            ...prev,\n            points_multiplier: prev?.points_multiplier + task.points_reward!,\n          };\n        });\n      }\n    });\n  };\n\n  return {\n    participant,\n    isThirdPartyAuthenticated,\n    addPoints,\n    getParticipant,\n  };\n};\n","export enum TaskRewardType {\n  points = \"points\",\n  multiplier = \"multiplier\",\n}\n","export enum ThirdPartyProvider {\n  twitter = \"twitter\",\n  telegram = \"telegram\",\n  discord = \"discord\",\n}\n","export const getCurrentHrefWithoutQueryParams = () => {\n  // Create a new URL object based on window.location\n  const url = new URL(window.location.href);\n\n  // Set the search (query parameters) to an empty string to remove it\n  url.search = \"\";\n\n  // Return the href without query parameters\n  return url.href;\n};\n","import { useApi } from \"@/hooks/useApi\";\nimport { ThirdPartyProvider } from \"@/models/enums/third_party.enum\";\nimport { getCurrentHrefWithoutQueryParams } from \"@/utils/utils\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useParticipant } from \"./participant\";\n\ntype ProviderStatus = {\n  [key in ThirdPartyProvider]: boolean;\n};\n\nconst defaultProviderStatus: ProviderStatus = Object.fromEntries(\n  Object.values(ThirdPartyProvider).map((provider) => [provider, false])\n) as ProviderStatus;\n\ntype ThirdPartyAuthState = {\n  isLoading: boolean;\n  authenticated: ProviderStatus;\n  authenticate: (provider: ThirdPartyProvider) => void;\n  isAuthenticated: (provider: ThirdPartyProvider) => boolean;\n};\n\nconst context = createContext<ThirdPartyAuthState>({\n  isLoading: false,\n  authenticated: defaultProviderStatus,\n  authenticate: () => ({}),\n  isAuthenticated: () => false,\n});\n\nexport const useThirdPartyAuth = () => useContext(context);\n\nexport function ThirdPartyAuthProvider({\n  children,\n  state,\n  errorCallback,\n}: {\n  children: any;\n  state?: ThirdPartyAuthState;\n  errorCallback?: (error: any) => void;\n}) {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  state ??= useThirdPartyAuthState(errorCallback);\n  return <context.Provider value={state}>{children}</context.Provider>;\n}\n\nexport const useThirdPartyAuthState = (\n  errorCallback?: (error: any) => void\n): ThirdPartyAuthState => {\n  const [authenticated, setAuthenticated] = useState<ProviderStatus>(\n    defaultProviderStatus\n  );\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const { participant } = useParticipant();\n  const api = useApi();\n\n  useEffect(() => {\n    const newStatus: ProviderStatus = Object.fromEntries(\n      Object.values(ThirdPartyProvider).map((provider) => [\n        provider,\n        !!participant?.authenticated.includes(provider),\n      ])\n    ) as ProviderStatus;\n\n    setAuthenticated(newStatus);\n  }, [participant]);\n\n  const isAuthenticated = (provider: ThirdPartyProvider): boolean => {\n    return authenticated[provider] || false;\n  };\n\n  const authenticate = (provider: ThirdPartyProvider): void => {\n    setIsLoading(true);\n    api\n      .get(`auth/${provider}`, {\n        params: {\n          redirect_url: getCurrentHrefWithoutQueryParams(),\n        },\n      })\n      .then(function (response) {\n        if (response.data.url) {\n          //check if there is an error in query params\n          if (response.data.url.includes(\"?error=\")) {\n            throw new Error(\n              \"Failed to authenticate with ThirdPartyAuth: \" +\n                response.data.url.split(\"?error=\")[1]\n            );\n          }\n\n          window.location.href = response.data.url;\n        }\n      })\n      .catch(function (error) {\n        console.error(error);\n        errorCallback && errorCallback(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return {\n    isLoading,\n    authenticated,\n    authenticate,\n    isAuthenticated,\n  };\n};\n","import { ParticipantTaskStatus } from \"@/models/enums/participants.enum\";\nimport { TaskButtonType } from \"@/models/enums/task_button_type.enum\";\nimport { TaskType } from \"@/models/enums/tasks.enum\";\nimport {\n  IDiscordJoinMetadata,\n  IOpenUrlMetadata,\n  ITask,\n  ITelegramJoinMetadata,\n  ITwitchFollowMetadata,\n  ITwitterFollowMetadata,\n  ITwitterLikeMetadata,\n  ITwitterReplyMetadata,\n  ITwitterRepostMetadata,\n  IYoutubeSubscribeMetadata,\n  IYoutubeViewMetadata,\n} from \"@/models/interfaces/task\";\nimport { TaskProvider, useTask } from \"@/providers/task\";\nimport {\n  ThirdPartyAuthProvider,\n  useThirdPartyAuth,\n} from \"@/providers/third_party_auth\";\n\nimport { useState } from \"react\";\nimport { ThirdPartyProvider } from \"..\";\n\ninterface TaskCallbacks {\n  onYoutubeView: (task: ITask, videoId: string) => Promise<number>;\n  onFileUpload: (task: ITask) => Promise<string>;\n  onSubmitString: (task: ITask) => Promise<string>;\n}\n\ntype Props = {\n  task: ITask;\n  participationDisabled: boolean;\n  maintenance: boolean;\n  children: (props: {\n    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    type: TaskButtonType;\n    isLoading?: boolean;\n    disabled?: boolean;\n    comment: string | null | undefined;\n  }) => React.ReactElement;\n  callbacks: TaskCallbacks;\n  errorCallback?: (error: any) => void;\n  onSuccess?: () => void;\n};\n\nconst TaskWrapperBase = (props: Props) => {\n  const {\n    task,\n    participationDisabled,\n    maintenance,\n    children,\n    callbacks,\n    onSuccess,\n  } = props;\n  const [linkClicked, setLinkClicked] = useState<boolean>(false);\n\n  const { participate, isParticipationLoading } = useTask();\n\n  const thirdPartyAuth = useThirdPartyAuth();\n\n  const completed =\n    task.participation &&\n    task.participation.status === ParticipantTaskStatus.completed;\n\n  const onLinkClick = async () => {\n    switch (task.type) {\n      case TaskType.discord_join:\n        window.open(\n          (task.metadata as IDiscordJoinMetadata).invite_url,\n          \"_blank\"\n        );\n        break;\n      case TaskType.twitter_follow:\n        window.open(\n          `https://twitter.com/intent/follow?screen_name=${\n            (task.metadata as ITwitterFollowMetadata).username\n          }`,\n          \"_blank\"\n        );\n        break;\n      case TaskType.twitter_like:\n        window.open((task.metadata as ITwitterLikeMetadata).post_url, \"_blank\");\n        break;\n      case TaskType.twitter_reply:\n        window.open(\n          (task.metadata as ITwitterReplyMetadata).post_url,\n          \"_blank\"\n        );\n        break;\n      case TaskType.twitter_repost:\n        window.open(\n          `https://twitter.com/intent/retweet?tweet_id=${\n            (task.metadata as ITwitterRepostMetadata).post_id\n          }`,\n          \"_blank\"\n        );\n        break;\n      case TaskType.telegram_join:\n        window.open(\n          `https://t.me/${(task.metadata as ITelegramJoinMetadata).username}`,\n          \"_blank\"\n        );\n        break;\n      case TaskType.image_upload:\n        const file = await callbacks.onFileUpload(task);\n        onParticipate({\n          file,\n        });\n        return;\n      case TaskType.submit_string:\n        const value = await callbacks.onSubmitString(task);\n        onParticipate({\n          value,\n        });\n        return;\n      case TaskType.open_url:\n        window.open((task.metadata as IOpenUrlMetadata).url, \"_blank\");\n        break;\n      case TaskType.youtube_view:\n        const secondsWatched = await callbacks.onYoutubeView(\n          task,\n          (task.metadata as IYoutubeViewMetadata).video_id\n        );\n        onParticipate({\n          seconds: secondsWatched,\n        });\n        return;\n      case TaskType.daily_login:\n        onParticipate();\n        return;\n      case TaskType.twitch_follow:\n        window.open(\n          (task.metadata as ITwitchFollowMetadata).twitch_url,\n          \"_blank\"\n        );\n        break;\n      case TaskType.youtube_subscribe:\n        window.open(\n          (task.metadata as IYoutubeSubscribeMetadata).channel_url,\n          \"_blank\"\n        );\n        break;\n    }\n\n    setLinkClicked(true);\n  };\n\n  const isAuthenticated = () => {\n    switch (task.type) {\n      case TaskType.discord_connect:\n      case TaskType.discord_join:\n        return thirdPartyAuth.isAuthenticated(ThirdPartyProvider.discord);\n      case TaskType.twitter_connect:\n      case TaskType.twitter_follow:\n      case TaskType.twitter_like:\n      case TaskType.twitter_reply:\n      case TaskType.twitter_repost:\n        return thirdPartyAuth.isAuthenticated(ThirdPartyProvider.twitter);\n      case TaskType.telegram_connect:\n      case TaskType.telegram_join:\n        return thirdPartyAuth.isAuthenticated(ThirdPartyProvider.telegram);\n      default:\n        return true;\n    }\n  };\n\n  const authenticate = () => {\n    switch (task.type) {\n      case TaskType.discord_connect:\n      case TaskType.discord_join:\n        return thirdPartyAuth.authenticate(ThirdPartyProvider.discord);\n      case TaskType.twitter_connect:\n      case TaskType.twitter_follow:\n      case TaskType.twitter_like:\n      case TaskType.twitter_reply:\n      case TaskType.twitter_repost:\n        return thirdPartyAuth.authenticate(ThirdPartyProvider.twitter);\n      case TaskType.telegram_connect:\n      case TaskType.telegram_join:\n        return thirdPartyAuth.authenticate(ThirdPartyProvider.telegram);\n    }\n  };\n\n  const onParticipate = async (body?: any) => {\n    const resp = await participate(task, body, onSuccess);\n    if (!resp) {\n      setLinkClicked(false);\n    }\n  };\n\n  const handleClick = () => {\n    if (participationDisabled || maintenance || completed) {\n      return undefined;\n    }\n\n    if (!isAuthenticated()) {\n      authenticate();\n    } else if (linkClicked) {\n      onParticipate();\n    } else {\n      onLinkClick();\n    }\n  };\n\n  const getType = () => {\n    if (completed) {\n      return TaskButtonType.COMPLETED;\n    }\n\n    if (!task.participation) {\n      return TaskButtonType.NO_PARTICIPANT;\n    }\n\n    if (task.participation?.status === ParticipantTaskStatus.pending) {\n      return TaskButtonType.PENDING;\n    }\n\n    if (task.participation?.status === ParticipantTaskStatus.failed) {\n      return TaskButtonType.FAILED;\n    }\n\n    if (linkClicked) {\n      return TaskButtonType.CLAIM;\n    }\n\n    if (isAuthenticated()) {\n      return TaskButtonType.START;\n    }\n\n    return TaskButtonType.AUTH_REQUIRED;\n  };\n\n  const noOnClick = () => {\n    if (completed || maintenance || participationDisabled) {\n      return true;\n    }\n    if (\n      task.type === TaskType.manual ||\n      task.type === TaskType.twitter_activity\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  return children({\n    onClick: !noOnClick() ? handleClick : undefined,\n    type: getType(),\n    isLoading: thirdPartyAuth.isLoading || isParticipationLoading,\n    disabled: participationDisabled || maintenance,\n    comment: task.participation?.comment,\n  });\n};\n\nconst TaskWrapper = (props: Props) => {\n  const { task, participationDisabled, maintenance, errorCallback, onSuccess } =\n    props;\n  return (\n    <TaskProvider errorCallback={errorCallback}>\n      <ThirdPartyAuthProvider errorCallback={errorCallback}>\n        <TaskWrapperBase\n          task={task}\n          participationDisabled={participationDisabled}\n          maintenance={maintenance}\n          callbacks={props.callbacks}\n          onSuccess={onSuccess}\n        >\n          {props.children}\n        </TaskWrapperBase>\n      </ThirdPartyAuthProvider>\n    </TaskProvider>\n  );\n};\n\nexport default TaskWrapper;\n","export enum MissionType {\n  guaranteed = \"guaranteed\",\n  scoreboard = \"scoreboard\",\n  lottery = \"lottery\",\n}\n\nexport enum MissionRewardType {\n  crypto = \"crypto\",\n  points = \"points\",\n  points_per_task = \"points_per_task\",\n}\n","export enum QuestWebhookType {\n  participant_reward_added = 'participant_reward_added',\n  participant_reward_removed = 'participant_reward_removed',\n  third_party_authenticated = 'third_party_authenticated',\n  task_completed = 'task_completed',\n}\n","export enum TaskValidation {\n  email = \"email\",\n  is_equal = \"is_equal\",\n}\n","import { GamesocialProvider } from \"./providers/gamesocial\";\nimport { MissionsProvider } from \"./providers/missions\";\nimport { ParticipantProvider } from \"./providers/participant\";\n\nexport const QuestsProvider = ({\n  children,\n  apiKey,\n  apiUrl,\n  errorCallback,\n}: {\n  children: any;\n  apiKey: string;\n  apiUrl: string;\n  errorCallback?: (error: any) => void;\n}) => {\n  return (\n    <GamesocialProvider apiKey={apiKey} apiUrl={apiUrl}>\n      <ParticipantProvider errorCallback={errorCallback}>\n        <MissionsProvider>{children}</MissionsProvider>\n      </ParticipantProvider>\n    </GamesocialProvider>\n  );\n};\n"],"mappings":"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","names":["ParticipantTaskStatus","ParticipantMissionStatus","TaskButtonType","TaskType","import_react","import_react","api","axios","import_react","import_jsx_runtime","context","tasks","import_react","TaskRewardType","import_jsx_runtime","context","prev","import_jsx_runtime","context","ThirdPartyProvider","import_react","import_jsx_runtime","context","import_react","import_jsx_runtime","_a","MissionType","MissionRewardType","QuestWebhookType","TaskValidation","import_jsx_runtime"]}