import { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { jsx } from 'react/jsx-runtime';
import wt from 'axios';

var nt=Object.defineProperty,st=Object.defineProperties;var ct=Object.getOwnPropertyDescriptors;var F=Object.getOwnPropertySymbols;var dt=Object.prototype.hasOwnProperty,ut=Object.prototype.propertyIsEnumerable;var G=(e,t,r)=>t in e?nt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,w=(e,t)=>{for(var r in t||(t={}))dt.call(t,r)&&G(e,r,t[r]);if(F)for(var r of F(t))ut.call(t,r)&&G(e,r,t[r]);return e},g=(e,t)=>st(e,ct(t));var A=(e,t,r)=>new Promise((i,a)=>{var d=c=>{try{n(r.next(c));}catch(o){a(o);}},_=c=>{try{n(r.throw(c));}catch(o){a(o);}},n=c=>c.done?i(c.value):Promise.resolve(c.value).then(d,_);n((r=r.apply(e,t)).next());});var C=(a=>(a.created="created",a.pending="pending",a.completed="completed",a.failed="failed",a))(C||{}),lt=(a=>(a.created="created",a.started="started",a.completed="completed",a.failed="failed",a))(lt||{});var O=(n=>(n.NO_PARTICIPANT="NO_PARTICIPANT",n.START="START",n.CLAIM="CLAIM",n.PENDING="PENDING",n.COMPLETED="COMPLETED",n.FAILED="FAILED",n.AUTH_REQUIRED="AUTH_REQUIRED",n))(O||{});var T=(p=>(p.telegram_join="telegram_join",p.telegram_connect="telegram_connect",p.youtube_view="youtube_view",p.image_upload="image_upload",p.twitter_repost="twitter_repost",p.twitter_follow="twitter_follow",p.twitter_reply="twitter_reply",p.twitter_like="twitter_like",p.twitter_activity="twitter_activity",p.twitter_connect="twitter_connect",p.discord_join="discord_join",p.discord_connect="discord_connect",p.submit_string="submit_string",p.manual="manual",p.daily_login="daily_login",p.open_url="open_url",p.youtube_subscribe="youtube_subscribe",p.twitch_follow="twitch_follow",p))(T||{});var N=createContext({apiUrl:"",apiKey:"",authToken:void 0,setAuthToken:()=>{}}),y=()=>useContext(N);function j({children:e,state:t,apiKey:r,apiUrl:i}){return t!=null||(t=ht(r,i)),jsx(N.Provider,{value:t,children:e})}var ht=(e,t)=>{let[r,i]=useState({apiUrl:t,apiKey:e,userAuthToken:void 0}),a=r.userAuthToken,d=useCallback(_=>{i(n=>g(w({},n),{userAuthToken:_}));},[]);return {apiUrl:t,apiKey:e,authToken:a,setAuthToken:d}};var v=()=>{let{authToken:e,apiUrl:t,apiKey:r}=y(),i=()=>{let _=wt.create({baseURL:t,timeout:1e4,headers:{"Api-Key":r,"Api-Version":"1.0"}});return _.interceptors.request.use(n=>{let c=e;return c&&(n.headers.Authorization=`Bearer ${c}`),n},n=>Promise.reject(n)),_.interceptors.response.use(n=>n,n=>(n.response&&n.response.status===401&&typeof window!="undefined"&&localStorage.removeItem("token"),Promise.reject(n))),_},[a,d]=useState(i());return useEffect(()=>{d(i());},[t,r,e]),a};var x={discord_not_connected:"Discord account is not connected",discord_guild_user_not_found:"Discord user not found in channel ",discord_guild_required_role_not_exists:"Discord channel verification must be passed",discord_guild_user_is_pending:"Please validate that your accepted Terms of Discord channel",discord_unauthenticated:"Please re-authenticate your discord account",telegram_not_connected:"Telegram account is not connected",telegram_member_not_found:"Telegram account not found in group",telegram_unauthenticated:"Please re-authenticate your telegram account",twitter_not_connected:"X account is not connected",twitter_follower_not_found:"Your X account do not follow required account",twitter_unauthenticated:"Please re-authenticate your X account",youtube_invalid_video_watch_length:"Please watch whole video",file_not_provided:"File not provided",file_size_exceeds:"File size exceeds limit",invalid_file_type:"Invalid file type",mission_not_found:"Mission not found",mission_not_started:"Mission not started",mission_ended:"Mission ended",task_not_found:"Task not found",task_inactive:"Task inactive",participant_not_found:"Participant not found",third_party_unauthenticated:"Please re-authenticate your account",invalid_email:"Invalid email address",invalid_value:"Invalid value",invalid_captcha:"Invalid captcha"},K=e=>e===x.discord_unauthenticated||e===x.telegram_unauthenticated||e===x.twitter_unauthenticated;var $=createContext({missions:[],tasks:[],getTasksForMission:()=>[],updateTaskStatus:()=>{},maintenance:!1}),H=()=>useContext($);function q({children:e,state:t}){return t!=null||(t=yt()),jsx($.Provider,{value:t,children:e})}var yt=()=>{let[e,t]=useState([]),[r,i]=useState([]),{authToken:a}=y(),d=v(),[_,n]=useState(!1);useEffect(()=>{e.length>0&&o(e.map(u=>u.id));},[e]),useEffect(()=>{a&&a.length===0&&n(!0);},[a]);let c=useCallback(()=>{d&&d.get("missions").then(function(u){t(u.data);}).catch(function(){n(!0);}).finally(function(){});},[d]),o=u=>{let m=u.map(f=>d.get(`missions/${f}/tasks`));Promise.all(m).then(function(f){let P=new Set(Object.values(T)),h=f.map(k=>k.data).flat().filter(k=>P.has(k.type));i(h);}).catch(function(){n(!0);});},s=(u,m)=>{i(r.map(f=>f.id===u?g(w({},f),{participation:{status:m}}):f));},l=useCallback(u=>r.filter(m=>m.mission_id===u),[r]);return useEffect(()=>{c();},[a,c]),{missions:e,tasks:r,getTasksForMission:l,updateTaskStatus:s,maintenance:_}};var J=(r=>(r.points="points",r.multiplier="multiplier",r))(J||{});var z=createContext({participant:void 0,isThirdPartyAuthenticated:()=>!1,addPoints:()=>{},getParticipant:()=>{}}),M=()=>useContext(z);function V({children:e,state:t,errorCallback:r}){return t!=null||(t=Mt(r)),jsx(z.Provider,{value:t,children:e})}var Mt=e=>{let[t,r]=useState(),{authToken:i}=y(),a=v();useEffect(()=>{i?d():r(void 0);},[i]);let d=()=>{a.get("participants/me").then(function(c){r(c.data);}).catch(function(c){console.error(c),e&&e(c);});};return {participant:t,isThirdPartyAuthenticated:c=>!!(t!=null&&t.authenticated.includes(c)),addPoints:c=>{c.points_reward&&r(o=>{var s;if(o)if(c.reward_type==="points"){let l=Math.floor(c.points_reward*((s=t==null?void 0:t.points_multiplier)!=null?s:1));r(u=>{if(u)return g(w({},u),{points:(u==null?void 0:u.points)+l})});}else r(l=>{if(l)return g(w({},l),{points_multiplier:(l==null?void 0:l.points_multiplier)+c.points_reward})});});},getParticipant:d}};var W=createContext({isParticipationLoading:!1,participate:()=>Promise.resolve(!1)}),X=()=>useContext(W);function Q({children:e,state:t,errorCallback:r}){return t!=null||(t=Dt(r)),jsx(W.Provider,{value:t,children:e})}var Dt=e=>{let[t,r]=useState(!1),{updateTaskStatus:i}=H(),{addPoints:a,getParticipant:d}=M(),_=v(),n=o=>{var l,u,m,f,P,h,k,p;let s="";(u=(l=o==null?void 0:o.response)==null?void 0:l.data)!=null&&u.message?typeof((f=(m=o==null?void 0:o.response)==null?void 0:m.data)==null?void 0:f.message)=="string"&&(s=(h=(P=o==null?void 0:o.response)==null?void 0:P.data)==null?void 0:h.message.toString()):(k=o==null?void 0:o.response)!=null&&k.message&&(s=(p=o==null?void 0:o.response)==null?void 0:p.message.toString()),s?s in x?(K(s)&&d(),e&&e(x[s])):e&&e(s):e&&e("Server error, please try again later");};return {isParticipationLoading:t,participate:(o,s,l)=>A(void 0,null,function*(){r(!0);let u=w({},s);if(s!=null&&s.file){let m=yield fetch(s.file).then(f=>f.blob()).then(f=>{let P=new FileReader;return P.readAsDataURL(f),new Promise(h=>{P.onloadend=()=>{h(P.result);};})});u=g(w({},s),{file:{imageSrc:m}});}return yield _.post(`tasks/${o.id}`,s?u:void 0).then(function(m){return i(o.id,m.data.status),m.data.status==="completed"&&o.points_reward&&a(o),l&&l(),!0}).catch(function(m){n(m);}).finally(function(){r(!1);}),!1})}};var S=(i=>(i.twitter="twitter",i.telegram="telegram",i.discord="discord",i))(S||{});var Z=()=>{let e=new URL(window.location.href);return e.search="",e.href};var tt=Object.fromEntries(Object.values(S).map(e=>[e,!1])),et=createContext({isLoading:!1,authenticated:tt,authenticate:()=>({}),isAuthenticated:()=>!1}),rt=()=>useContext(et);function it({children:e,state:t,errorCallback:r}){return t!=null||(t=Nt(r)),jsx(et.Provider,{value:t,children:e})}var Nt=e=>{let[t,r]=useState(tt),[i,a]=useState(!1),{participant:d}=M(),_=v();return useEffect(()=>{let o=Object.fromEntries(Object.values(S).map(s=>[s,!!(d!=null&&d.authenticated.includes(s))]));r(o);},[d]),{isLoading:i,authenticated:t,authenticate:o=>{a(!0),_.get(`auth/${o}`,{params:{redirect_url:Z()}}).then(function(s){if(s.data.url){if(s.data.url.includes("?error="))throw new Error("Failed to authenticate with ThirdPartyAuth: "+s.data.url.split("?error=")[1]);window.location.href=s.data.url;}}).catch(function(s){console.error(s),e&&e(s);}).finally(()=>{a(!1);});},isAuthenticated:o=>t[o]||!1}};var Yt=e=>{var U;let{task:t,participationDisabled:r,maintenance:i,children:a,callbacks:d,onSuccess:_}=e,[n,c]=useState(!1),{participate:o,isParticipationLoading:s}=X(),l=rt(),u=t.participation&&t.participation.status==="completed",m=()=>A(void 0,null,function*(){switch(t.type){case"discord_join":window.open(t.metadata.invite_url,"_blank");break;case"twitter_follow":window.open(`https://twitter.com/intent/follow?screen_name=${t.metadata.username}`,"_blank");break;case"twitter_like":window.open(t.metadata.post_url,"_blank");break;case"twitter_reply":window.open(t.metadata.post_url,"_blank");break;case"twitter_repost":window.open(`https://twitter.com/intent/retweet?tweet_id=${t.metadata.post_id}`,"_blank");break;case"telegram_join":window.open(`https://t.me/${t.metadata.username}`,"_blank");break;case"image_upload":let b=yield d.onFileUpload(t);h({file:b});return;case"submit_string":let I=yield d.onSubmitString(t);h({value:I});return;case"open_url":window.open(t.metadata.url,"_blank");break;case"youtube_view":let ot=yield d.onYoutubeView(t,t.metadata.video_id);h({seconds:ot});return;case"daily_login":h();return;case"twitch_follow":window.open(t.metadata.twitch_url,"_blank");break;case"youtube_subscribe":window.open(t.metadata.channel_url,"_blank");break}c(!0);}),f=()=>{switch(t.type){case"discord_connect":case"discord_join":return l.isAuthenticated("discord");case"twitter_connect":case"twitter_follow":case"twitter_like":case"twitter_reply":case"twitter_repost":return l.isAuthenticated("twitter");case"telegram_connect":case"telegram_join":return l.isAuthenticated("telegram");default:return !0}},P=()=>{switch(t.type){case"discord_connect":case"discord_join":return l.authenticate("discord");case"twitter_connect":case"twitter_follow":case"twitter_like":case"twitter_reply":case"twitter_repost":return l.authenticate("twitter");case"telegram_connect":case"telegram_join":return l.authenticate("telegram")}},h=b=>A(void 0,null,function*(){(yield o(t,b,_))||c(!1);}),k=()=>{r||i||u||(f()?n?h():m():P());},p=()=>{var b,I;return u?"COMPLETED":t.participation?((b=t.participation)==null?void 0:b.status)==="pending"?"PENDING":((I=t.participation)==null?void 0:I.status)==="failed"?"FAILED":n?"CLAIM":f()?"START":"AUTH_REQUIRED":"NO_PARTICIPANT"};return a({onClick:!!(u||i||r||t.type==="manual"||t.type==="twitter_activity")?void 0:k,type:p(),isLoading:l.isLoading||s,disabled:r||i,comment:(U=t.participation)==null?void 0:U.comment})},$t=e=>{let{task:t,participationDisabled:r,maintenance:i,errorCallback:a,onSuccess:d}=e;return jsx(Q,{errorCallback:a,children:jsx(it,{errorCallback:a,children:jsx(Yt,{task:t,participationDisabled:r,maintenance:i,callbacks:e.callbacks,onSuccess:d,children:e.children})})})},Ht=$t;var qt=(i=>(i.guaranteed="guaranteed",i.scoreboard="scoreboard",i.lottery="lottery",i))(qt||{}),Jt=(i=>(i.crypto="crypto",i.points="points",i.points_per_task="points_per_task",i))(Jt||{});var zt=(a=>(a.participant_reward_added="participant_reward_added",a.participant_reward_removed="participant_reward_removed",a.third_party_authenticated="third_party_authenticated",a.task_completed="task_completed",a))(zt||{});var Vt=(r=>(r.email="email",r.is_equal="is_equal",r))(Vt||{});var Tr=({children:e,apiKey:t,apiUrl:r,errorCallback:i})=>jsx(j,{apiKey:t,apiUrl:r,children:jsx(V,{errorCallback:i,children:jsx(q,{children:e})})});

export { j as GamesocialProvider, Jt as MissionRewardType, qt as MissionType, q as MissionsProvider, lt as ParticipantMissionStatus, V as ParticipantProvider, C as ParticipantTaskStatus, zt as QuestWebhookType, Tr as QuestsProvider, O as TaskButtonType, Q as TaskProvider, J as TaskRewardType, T as TaskType, Vt as TaskValidation, Ht as TaskWrapper, S as ThirdPartyProvider, x as errorMessages, Z as getCurrentHrefWithoutQueryParams, K as shouldRefetchParticipant, y as useGamesocial, ht as useGamesocialState, H as useMissions, yt as useMissionsState, M as useParticipant, Mt as useParticipantState, X as useTask, Dt as useTaskState };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,